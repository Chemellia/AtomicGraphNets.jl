name: CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  test:
    env:
      PYTHON: ""
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: ['1']
        julia-arch: [x64, x86]
        os: [ubuntu-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ matrix.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ matrix.os }}-test-${{ env.cache-name }}-
            ${{ matrix.os }}-test-
            ${{ matrix.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info
	  token: ${{ secrets.CODECOV_TOKEN }}
      - name: Format code
        if: ${{ matrix.os == 'ubuntu-latest' && github.event_name == 'pull_request' && matrix.julia-arch == 'x86' }}
        run: |
          using Pkg
          Pkg.add(; name="JuliaFormatter", uuid="98e50ef6-434e-11e9-1051-2b60c6c9e899")
          using JuliaFormatter
          format("."; verbose=true)
        shell: julia --color=yes {0}
      - uses: reviewdog/action-suggester@v1
        if: ${{ matrix.os == 'ubuntu-latest' && github.event_name == 'pull_request' && matrix.julia-arch == 'x86' }}
        with:
          tool_name: JuliaFormatter
          fail_on_error: true
	  